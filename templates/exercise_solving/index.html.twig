{% extends 'base.html.twig' %}
{% block js %}
    <script src="https://pagecdn.io/lib/ace/1.4.12/ace.js"></script>
    <script src="{{ asset("js/ext-language_tools.js") }}"></script>
    <script src="{{ asset("js/dynamic-language-loader.js") }}"></script>
{% endblock %}
{% block title %}CodingChallenge - {{ exercise.Name }}{% endblock %}
{% block titre_page %}
<a href="{{ path('exercise',{ id: exercise.id}) }}"><i class="fas fa-backward fa-sm"></i></a><br>
    {{ exercise.Name }}
{% endblock %}
{% block body %}
<div>
{{ description }}
</div>
<hr/>
<div id="code-edit-area">
    <select id="languageSelect" onchange="changeLanguage(this);">
            {% for lang in languages %}
                <option value="[&quot;{{lang.getNameCode()}}&quot;,&quot;{{lang.getName()}}&quot;]">{{ lang.getName() }}</option>
            {% endfor %}
        </select>
        <i id="led" class="far fa-lightbulb fa-lg" data-toggle="modal" data-target="#exo-help" style="position:absolute;margin-left:1%;"></i>
        <div class="modal" id="exo-help" role="dialog" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="background-color: #2a3238;">
                    <div class="modal-body">
                        <h5 class="modal-title">Choix langage</h5><br>
                        <p>Vous pouvez, en cliquant sur la petite flèche, choisir le langage de votre choix afin de résoudre l'exercice.
                        Nous vous conseillons de prendre un langage que vous connaissez bien, ou alors un que vous voulez / êtes entrain d'apprendre.</p><br>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" style="float:right">Fermer l'aide</button>
                    </div>
                </div>
            </div>
        </div>
    <div id="editor" style="height 40vh;"></div>
<br/>
<a onclick="submitCode()"><div class="btn btn-primary">Soumettre la solution</div></a>
        <i id="led2" class="far fa-lightbulb fa-2x" data-toggle="modal" data-target="#exo-help2" style="position:absolute;margin-left:1%;"></i>
        <div class="modal" id="exo-help2" role="dialog" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content" style="background-color: #2a3238;">
                    <div class="modal-body">
                        <h5 class="modal-title">Soumission d'une solution</h5><br>
                        <p>Lorsque vous cliquez sur le bouton "Soumettre la solution", votre code passera une batterie de tests afin de savoir s'il résout l'exercice donné ou non.
                        <br>La console de gauche affiche la sortie standard du compilateur, tandis que celle de droite affiche les erreurs.
                        <br>De plus, votre code est enregistré à chaque soumission. Donc si vous partez et revenez votre code sera comme la dernière fois que vous l'avez soumis.</p><br>
                        <button type="button" class="btn btn-primary" data-dismiss="modal" style="float:right">Fermer l'aide</button>
                    </div>
                </div>
            </div>
        </div>
</div>
<br/>
<div id="score"></div>

<p>Sortie standard</p>
<div id="outputs-div">
    <div id="tests-output" class="output">
    </div>
</div><br><br>
<p>Sortie d'erreurs</p>
<div id="outputs-div">
    <div id="errors-output" class="output">
    </div>
</div>


<script src="{{asset('js/jquery-3.5.1.min.js')}}"></script>
{% block javascripts %}
<script>
    $('#led').mouseenter(function() {
    $('#led').removeClass("far").addClass("fas").css("cursor", "pointer");;
    }),
    $('#led').mouseleave(function() {
        $('#led').removeClass("fas").addClass("far");
    })
    $('#led2').mouseenter(function() {
    $('#led2').removeClass("far").addClass("fas").css("cursor", "pointer");;
    }),
    $('#led2').mouseleave(function() {
        $('#led2').removeClass("fas").addClass("far");
    })

    var userId = {{ app.user.id }};
    var exerciseId = {{ exercise.id }};
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/monokai");
    editor.session.setMode("ace/mode/javascript");
    editor.setFontSize(18);
    editor.setOptions({
    maxLines: 25
    });
    changeLanguage(document.querySelector("#languageSelect"));
    function submitCode() {
        let languageSelectNode = document.querySelector("#languageSelect");

        var req = {
            "userId": userId,
            "exerciseId": exerciseId,
            "submittedCode":
            {
                "lang": JSON.parse(languageSelectNode.value)[1],
                "source": editor.getValue()
            }

        };
        let out = document.querySelector("#tests-output");
        let err = document.querySelector("#errors-output");
        out.textContent = "Tests en cours...";
        let ajax = new XMLHttpRequest();
        ajax.open("POST","{{ path('run', {'id' : app.request.attributes.get('_route_params')['id']}) }}",false);
        ajax.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        ajax.send(JSON.stringify(req));
        let jsonData = JSON.parse(ajax.responseText);
        console.log(jsonData);
        out.textContent = "";
        err.textContent = "";
        let score = 0;
        jsonData.forEach(el => {
            if(el.check) score ++;
            if(el.name == undefined) { // compilation error
                out.textContent = el.stdout;
                err.textContent = el.stderr;
            } else {
                out.textContent += el.name + " :\r\n\t" + el.stdout + "\r\n\r\n";
                err.textContent += el.stderr == "" ? "" : el.name + " :\r\n" + el.stderr + "\r\n" + (el.stderr.slice(-1) ==  '\n' ? "" : "\r\n");
            }
        });
        let scoreDiv = document.querySelector("#score");
        scoreDiv.className = "alert";
        if(score == 0) {
            scoreDiv.classList.add("alert-danger");
        } else if (score == jsonData.length) {
            scoreDiv.classList.add("alert-success");
        } else {
            scoreDiv.classList.add("alert-warning");
        }
        scoreDiv.textContent = score + "/" + jsonData.length + " test(s) passée(s)";
        
        
        
        /*
        $.ajax({
            url: "{{ path('run', {'id' : app.request.attributes.get('_route_params')['id']}) }}",
            type: 'POST',
            data: JSON.stringify(req),
            dataType: 'json',
            success : function(data) {          
                let jsonData = JSON.parse(data);
                console.log(jsonData['compile']);
                $("#tests-output").append();  

            },
            error : function() {
                alert("Une erreur est survenue");
            }
        })*/
    }

    function changeLanguage(node) {
        let req = {
            "lang": JSON.parse(node.value)[1],
            "userId": userId,
            "exerciseId": exerciseId,
        }
        let ajax = new XMLHttpRequest();
        ajax.open("POST","{{ path('lang', {'id' : app.request.attributes.get('_route_params')['id']}) }}",false);
        ajax.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
        ajax.send(JSON.stringify(req));
        let code = ajax.responseText;
        editor.setValue(code);
        
        loadLanguage(node);
    }
</script>    
{% endblock %}
{% endblock %}
